<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>Chirpy</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-09-26T09:34:29+00:00</updated> <author> <name>your_full_name</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 your_full_name </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>raft线性一致性读</title><link href="/posts/raft_linearizable-read/" rel="alternate" type="text/html" title="raft线性一致性读" /><published>2022-02-08T00:00:00+00:00</published> <updated>2022-02-08T00:00:00+00:00</updated> <id>/posts/raft_linearizable-read/</id> <content src="/posts/raft_linearizable-read/" /> <author> <name>your_full_name</name> </author> <category term="raft" /> <summary> ReadIndex Lease Read </summary> </entry> <entry><title>dolphinscheduler调度系统源码</title><link href="/posts/ds_smaster_work/" rel="alternate" type="text/html" title="dolphinscheduler调度系统源码" /><published>2022-01-17T00:00:00+00:00</published> <updated>2022-01-17T00:00:00+00:00</updated> <id>/posts/ds_smaster_work/</id> <content src="/posts/ds_smaster_work/" /> <author> <name>your_full_name</name> </author> <category term="Java" /> <summary> 1.架构设计 1.老版本master将任务直接写入zk,Work通过抢占式从zk获取任务，work与master无直接通信交互 2.新版master与work直接通信，master通过rpc远程调用将任务下发给work执行 1.1 老版(1.2.1为例)架构 1.2 新版(2.x github dev)架构 2.任务分发 2.1 老版任务分发 2.1.1 master将任务提交给zk //ProcessDao.java public Boolean submitTaskToQueue(TaskInstance taskInstance) { try{ if(taskInstance.isSubProcess()){ return true; } if(taskInstance.getStat... </summary> </entry> <entry><title>RocketMQ 最大消费次数maxReconsumeTimes</title><link href="/posts/rocketMQ_max_maxReconsumeTimes/" rel="alternate" type="text/html" title="RocketMQ 最大消费次数maxReconsumeTimes" /><published>2021-12-30T00:00:00+00:00</published> <updated>2021-12-30T00:00:00+00:00</updated> <id>/posts/rocketMQ_max_maxReconsumeTimes/</id> <content src="/posts/rocketMQ_max_maxReconsumeTimes/" /> <author> <name>your_full_name</name> </author> <category term="rocketmq" /> <summary> 默认事务消息最大次数transactionCheckMax=15，以及间隔时间transactionCheckInterval=60*1000 /** * The maximum number of times the message was checked, if exceed this value, this message will be discarded. */ @ImportantField private int transactionCheckMax = 15; /** * Transaction message check interval. */ @ImportantField private long transactionCheckInterval = 60 * 1000... </summary> </entry> <entry><title>记一次Aviator使用不当导致的线上OOM</title><link href="/posts/metaspace_oom/" rel="alternate" type="text/html" title="记一次Aviator使用不当导致的线上OOM" /><published>2021-12-01T00:00:00+00:00</published> <updated>2021-12-01T00:00:00+00:00</updated> <id>/posts/metaspace_oom/</id> <content src="/posts/metaspace_oom/" /> <author> <name>your_full_name</name> </author> <category term="Java" /> <summary> 问题描述 是的,没错,正如题中所说是Aviator使用不当造成的OOM,为何使用不当后边说 项目上线几个月了,发现云平台时不时会重启server,一般出现在某些高峰期，比如早上7-9点,晚上12点 通过-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath,配置可以获取到dump文件 发现每次dump都是自带监控产生的oom，自带监控的实现是基于Prometheus oom堆栈信息 具体监控如下 "pool-3-thread-2" prio=5 tid=124 RUNNABLE at java.lang.OutOfMemoryError.&amp;lt;init&amp;gt;(OutOfMemoryError.java:48) at sun.util.resources.TimeZoneNames.getContent... </summary> </entry> <entry><title>raft/hashicorp raft实现源码笔记</title><link href="/posts/raft_hashicorp/" rel="alternate" type="text/html" title="raft/hashicorp raft实现源码笔记" /><published>2021-03-17T00:00:00+00:00</published> <updated>2021-03-17T00:00:00+00:00</updated> <id>/posts/raft_hashicorp/</id> <content src="/posts/raft_hashicorp/" /> <author> <name>your_full_name</name> </author> <category term="raft" /> <summary> apply case LogCommand: start := time.Now() resp = r.fsm.Apply(req.log) metrics.MeasureSince([]string{"raft", "fsm", "apply"}, start) // func (c *FSM) Apply(log *raft.Log) interface{} { buf := log.Data msgType := structs.MessageType(buf[0]) // Check if this message type should be ignored when unknown. This is // used so that new commands can be added with developer control if older ... </summary> </entry> </feed>
